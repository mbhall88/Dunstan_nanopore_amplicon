import json
from pathlib import Path


# =====================================
# Workflow config items
configfile: "config/config.yaml"


WORKFLOW = Path("workflow").resolve()
RULES = WORKFLOW / "rules"
ENVS = WORKFLOW / "envs"
SCRIPTS = WORKFLOW / "scripts"
RESULTS = Path("results").resolve()
PLOTS = RESULTS / "plots"
TABLES = RESULTS / "tables"
CAPTIONS = WORKFLOW / "report"
RESOURCES = Path("resources").resolve()
LOGS = Path("logs/rules").resolve()
CONTAINERS = config["containers"]
GB = 1_024
GUPPY_VERSION = CONTAINERS["guppy"].split(":")[-1]
tools = ["mykrobe", "tbprofiler"]

# =====================================

with open(config["samplesheet"]) as fp:
    sample_data = json.load(fp)

RUNS = sample_data["runs"]
# =====================================
target_files = set()
EXPERIMENTS = set()
for run, info in RUNS.items():
    run_dir = info["run_dir"]
    if not run_dir:
        continue
    p = RESULTS / f"QC/plots/{run}/{run}NanoPlot-report.html"
    target_files.add(p)

    samples = info["samples"]
    if all(s.startswith("Pool") and "-" not in s for s in samples):
        rng = [int(s.replace("Pool", "")) for s in samples]

        if 16 in rng:
            rng = [x for x in rng if x != 16]
            exp = f"{run}_Pool16"
            EXPERIMENTS.add(exp)
            target_files.add(PLOTS / f"depth/{exp}.depth.png")
            
        start_rng = min(rng)
        end_rng = max(rng)

        if start_rng == end_rng:
            exp = f"{run}_Pool{start_rng}"
        else:
            exp = f"{run}_Pool{start_rng}-{end_rng}"

        EXPERIMENTS.add(exp)
        target_files.add(PLOTS / f"depth/{exp}.depth.png")
    else:
        for sample in info["samples"]:
            if "-" in sample:
                uid = sample.split("-", maxsplit=1)[1]
                exp = f"{run}_{uid}"
                EXPERIMENTS.add(exp)
                target_files.add(PLOTS / f"depth/{exp}.depth.png")

for tool in tools:
    target_files.add(PLOTS / f"{tool}.dst.png")


# =====================================
rule all:
    input:
        target_files,


# =====================================
include: RULES / "common.smk"
include: RULES / "basecall.smk"
include: RULES / "qc.smk"
include: RULES / "amr.smk"
include: RULES / "report.smk"
